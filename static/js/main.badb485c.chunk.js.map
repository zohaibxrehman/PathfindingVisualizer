{"version":3,"sources":["components/Board/Board.module.css","components/NavBar/NavBar.module.css","components/NavBar/NavBar.jsx","components/Node/Node.jsx","components/Board/Board.jsx","components/Customisation/SearchPicker.jsx","components/Customisation/MazePicker.jsx","components/Customisation/Customisation.jsx","maze_algorithms/recursiveDivision.js","maze_algorithms/simpleTerrain.js","maze_algorithms/flappyBirdGrid.js","maze_algorithms/MazeFacade.js","path_algorithms/breadthFirstSearch.js","path_algorithms/SearchFacade.js","components/Pathfinder.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","Navbar","bg","variant","Brand","href","rel","alt","src","width","height","className","navStyle","navBar","style","color","Component","Node","nextProps","nextState","this","props","type","display","outline","padding","row","column","onMouseDown","onMouseEnter","styleClasses","getClass","id","getStyle","Board","nodes","styles","tableWrapper","tableStyle","map","rowNodes","rowId","key","node","nodeId","SearchPicker","changeAlgorithm","FormGroup","Card","Title","textAlign","Tab","Container","defaultActiveKey","Row","Col","sm","ListGroup","Item","action","onClick","Content","Pane","eventKey","MazePicker","changeMaze","Customisation","visualize","reset","buttonDisable","clearedScreen","Form","text","Header","as","Body","newAlg","newMaze","float","Button","size","disabled","drawDungeon","endX","endY","drawnNodes","x","push","y","divide","startX","startY","axis","drawnNodes1","drawnNodes2","alternateX","alternateY","wallX","Math","floor","random","length","passageY","wallY","passageX","MazeFacade","newNodes","recursiveDivision","forEach","simpleTerrain","i","hole","j","flappyBirdGrid","Queue","elements","object","shift","solve","start","end","q","enqueue","visitedNodes","isVisited","found","isEmpty","dequeue","getNeighbours","neighbour","prev","console","log","reConstructPath","path","curr","reverse","pop","neighbours","filter","SearchFacade","nodesCopy","slice","breadthFirstSearch","Pathfinder","state","isMouseDown","mode","algorithm","maze","setState","mazeFacade","TOTAL_ROWS","TOTAL_COLS","setTimeout","document","getElementById","startNode","endNode","initialNodes","createNodes","querySelectorAll","waitTime","drawMaze","waitTime2","drawSearchPath","onMouseUp","handleMouseUp","lg","handleMouseDown","handleMouseEnter","createNodeObject","dist","Infinity","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.badb485c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"tableWrapper\":\"Board_tableWrapper__3L-oJ\",\"tableStyle\":\"Board_tableStyle__1hg4o\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"navBar\":\"NavBar_navBar__36P4w\"};","import React, { Component } from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport navStyle from './NavBar.module.css';\n\nexport class NavBar extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Navbar bg=\"dark\" variant=\"dark\">\n\t\t\t\t\t<Navbar.Brand href=\"#home\">\n\t\t\t\t\t\t<link\n\t\t\t\t\t\t\thref=\"https://fonts.googleapis.com/css2?family=Share+Tech+Mono&display=swap\"\n\t\t\t\t\t\t\trel=\"stylesheet\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<img alt=\"\" src=\"/maze.svg\" width=\"35\" height=\"35\" className=\"d-inline-block align-top\" />\n\t\t\t\t\t\t{'  '}\n\t\t\t\t\t\t<span className={navStyle.navBar}>PATHFINDER </span>\n\t\t\t\t\t\t<small style={{ color: '#eee' }}>\n\t\t\t\t\t\t\tPathfinding and Maze Generation Algorithm Visualizer\n\t\t\t\t\t\t</small>{' '}\n\t\t\t\t\t</Navbar.Brand>\n\t\t\t\t</Navbar>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default NavBar;\n","import React, { Component } from 'react';\nimport './animation.css';\n\nexport class Node extends Component {\n\tshouldComponentUpdate(nextProps, nextState) {\n\t\treturn this.props.type !== nextProps.type;\n\t}\n\n\tgetStyle() {\n\t\tconst style = {\n\t\t\tdisplay: 'inline-block',\n\t\t\toutline: '1px solid black',\n\t\t\theight: '27px',\n\t\t\tpadding: '0px',\n\t\t\twidth: '27px'\n\t\t};\n\n\t\treturn style;\n\t}\n\n\tgetClass() {\n\t\tconst { type } = this.props;\n\t\tif (type === 'regular') {\n\t\t\treturn 'regular';\n\t\t} else if (type === 'wall') {\n\t\t\treturn 'walls';\n\t\t} else if (type === 'start') {\n\t\t\treturn 'start';\n\t\t} else if (type === 'end') {\n\t\t\treturn 'end';\n\t\t}\n\t}\n\n\trender() {\n\t\tconst { row, column, type, onMouseDown, onMouseEnter } = this.props;\n\t\tconst styleClasses = this.getClass();\n\t\treturn (\n\t\t\t<td\n\t\t\t\tid={`node_${row}_${column}`}\n\t\t\t\tclassName={styleClasses}\n\t\t\t\tstyle={this.getStyle(type)}\n\t\t\t\tonMouseDown={() => onMouseDown(row, column)}\n\t\t\t\tonMouseEnter={() => onMouseEnter(row, column)}\n\t\t\t/>\n\t\t);\n\t}\n}\n\nexport default Node;\n","import React, { Component } from 'react';\nimport Node from '../Node/Node';\n\nimport styles from './Board.module.css';\n\nexport class Board extends Component {\n\trender() {\n\t\tconst { nodes, onMouseDown, onMouseEnter } = this.props;\n\t\treturn (\n\t\t\t<div className={styles.tableWrapper}>\n\t\t\t\t<table className={styles.tableStyle}>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{nodes.map((rowNodes, rowId) => {\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<tr key={rowId}>\n\t\t\t\t\t\t\t\t\t{rowNodes.map((node, nodeId) => {\n\t\t\t\t\t\t\t\t\t\tconst { row, column, type } = node;\n\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t<Node\n\t\t\t\t\t\t\t\t\t\t\t\tkey={nodeId}\n\t\t\t\t\t\t\t\t\t\t\t\trow={row}\n\t\t\t\t\t\t\t\t\t\t\t\tcolumn={column}\n\t\t\t\t\t\t\t\t\t\t\t\ttype={type}\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseDown={(row, column) => onMouseDown(row, column)}\n\t\t\t\t\t\t\t\t\t\t\t\tonMouseEnter={(row, column) => onMouseEnter(row, column)}\n\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t})}\n\t\t\t\t\t</tbody>\n\t\t\t\t</table>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport { Row, Col, FormGroup, Card, Tab, ListGroup } from 'react-bootstrap';\n\nexport class SearchPicker extends Component {\n\trender() {\n\t\tconst { changeAlgorithm } = this.props;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<Card.Title style={{ textAlign: 'left' }}>Pick an Algorithm</Card.Title>\n\t\t\t\t\t<Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#bfs\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col sm={4}>\n\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t<ListGroup.Item\n\t\t\t\t\t\t\t\t\t\taction\n\t\t\t\t\t\t\t\t\t\thref=\"#astar\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tchangeAlgorithm('astar');\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tA* Search\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t<ListGroup.Item\n\t\t\t\t\t\t\t\t\t\taction\n\t\t\t\t\t\t\t\t\t\thref=\"#dijkstra\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tchangeAlgorithm('dijkstra');\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tDijkstra\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t<ListGroup.Item\n\t\t\t\t\t\t\t\t\t\taction\n\t\t\t\t\t\t\t\t\t\thref=\"#bfs\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tchangeAlgorithm('bfs');\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tBreadth First Search\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col sm={8}>\n\t\t\t\t\t\t\t\t<Tab.Content>\n\t\t\t\t\t\t\t\t\t<Tab.Pane eventKey=\"#bfs\">\n\t\t\t\t\t\t\t\t\t\tBFS is a traversing algorithm where you should start from a selected node and\n\t\t\t\t\t\t\t\t\t\ttraverse the graph layerwise thus exploring the neighbour nodes.{' '}\n\t\t\t\t\t\t\t\t\t\t<em>Shortest path is guarenteed!</em>\n\t\t\t\t\t\t\t\t\t</Tab.Pane>\n\t\t\t\t\t\t\t\t\t<Tab.Pane eventKey=\"#dijkstra\">\n\t\t\t\t\t\t\t\t\t\tDijikstra's algorithm is a greedy algorithm for finding the shortest path between two nodes.\n\t\t\t\t\t\t\t\t\t</Tab.Pane>\n\t\t\t\t\t\t\t\t\t<Tab.Pane eventKey=\"#astar\">\n\t\t\t\t\t\t\t\t\tA* algorithm introduces a heuristic into a regular graph-searching algorithm,\n\t\t\t\t\t\t\t\t\t essentially planning ahead at each step so a more optimal decision is made.\n\t\t\t\t\t\t\t\t\t <br />\n\t\t\t\t\t\t\t\t\t <em> It is very popular in video games and web-based maps.</em>\n\t\t\t\t\t\t\t\t\t</Tab.Pane>\n\t\t\t\t\t\t\t\t</Tab.Content>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Tab.Container>\n\t\t\t\t</FormGroup>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default SearchPicker;\n","import React, { Component } from 'react';\nimport { Row, Col, FormGroup, Card, Tab, ListGroup } from 'react-bootstrap';\n\nexport class MazePicker extends Component {\n\trender() {\n\t\tconst { changeMaze } = this.props;\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<FormGroup>\n\t\t\t\t\t<Card.Title style={{ textAlign: 'left' }}>Now, Select a Maze</Card.Title>\n\t\t\t\t\t<Tab.Container id=\"list-group-tabs-example\" defaultActiveKey=\"#recursiveDivision\">\n\t\t\t\t\t\t<Row>\n\t\t\t\t\t\t\t<Col sm={4}>\n\t\t\t\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t\t\t\t<ListGroup.Item\n\t\t\t\t\t\t\t\t\t\taction\n\t\t\t\t\t\t\t\t\t\thref=\"#draw\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tchangeMaze('draw');\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tDraw your own\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t<ListGroup.Item\n\t\t\t\t\t\t\t\t\t\taction\n\t\t\t\t\t\t\t\t\t\thref=\"#simpleTerrain\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tchangeMaze('simpleTerrain');\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tSimple Terrain\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t<ListGroup.Item\n\t\t\t\t\t\t\t\t\t\taction\n\t\t\t\t\t\t\t\t\t\thref=\"#recursiveDivision\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tchangeMaze('recursiveDivision');\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tRecursive Division\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t\t<ListGroup.Item\n\t\t\t\t\t\t\t\t\t\taction\n\t\t\t\t\t\t\t\t\t\thref=\"#flappyBirdGrid\"\n\t\t\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\t\t\tchangeMaze('flappyBirdGrid');\n\t\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\tFlappy Bird Grid\n\t\t\t\t\t\t\t\t\t</ListGroup.Item>\n\t\t\t\t\t\t\t\t</ListGroup>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t\t<Col sm={8}>\n\t\t\t\t\t\t\t\t<Tab.Content>\n\t\t\t\t\t\t\t\t\t<Tab.Pane eventKey=\"#draw\">\n\t\t\t\t\t\t\t\t\t\tDraw your own walls on the grid and the search algorithm will find its way\n\t\t\t\t\t\t\t\t\t\taround it!\n\t\t\t\t\t\t\t\t\t</Tab.Pane>\n\t\t\t\t\t\t\t\t\t<Tab.Pane eventKey=\"#simpleTerrain\">\n\t\t\t\t\t\t\t\t\t\tRandomized terrain covering about one-third of all nodes on the grid.\n\t\t\t\t\t\t\t\t\t</Tab.Pane>\n\t\t\t\t\t\t\t\t\t<Tab.Pane eventKey=\"#recursiveDivision\">\n\t\t\t\t\t\t\t\t\t\tA maze will be generated using a divide and conquer approach.\n\t\t\t\t\t\t\t\t\t</Tab.Pane>\n\t\t\t\t\t\t\t\t\t<Tab.Pane eventKey=\"#flappyBirdGrid\">Possibly, no explanation needed!</Tab.Pane>\n\t\t\t\t\t\t\t\t</Tab.Content>\n\t\t\t\t\t\t\t</Col>\n\t\t\t\t\t\t</Row>\n\t\t\t\t\t</Tab.Container>\n\t\t\t\t</FormGroup>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default MazePicker;\n","import React, { Component } from 'react';\nimport { Form, FormGroup, Button, Card } from 'react-bootstrap';\nimport SearchPicker from './SearchPicker';\nimport MazePicker from './MazePicker';\n\nexport class Customisation extends Component {\n\trender() {\n\t\tconst { visualize, reset, changeAlgorithm, changeMaze, buttonDisable, clearedScreen } = this.props;\n\t\treturn (\n\t\t\t<Form>\n\t\t\t\t<Card bg=\"light\" text=\"dark\" style={{ height: '815px' }}>\n\t\t\t\t\t<Card.Header as=\"h5\">Customization</Card.Header>\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<SearchPicker changeAlgorithm={(newAlg) => changeAlgorithm(newAlg)} />\n\t\t\t\t\t\t<MazePicker changeMaze={(newMaze) => changeMaze(newMaze)} />\n\t\t\t\t\t\t<FormGroup style={{ float: 'left' }}>\n\t\t\t\t\t\t\t<Button onClick={() => visualize()} variant=\"primary\" size=\"lg\" disabled={buttonDisable || !clearedScreen}>\n\t\t\t\t\t\t\t\tVisualize!\n\t\t\t\t\t\t\t</Button>{' '}\n\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\tonClick={() => reset()}\n\t\t\t\t\t\t\t\tvariant=\"outline-primary\"\n\t\t\t\t\t\t\t\tsize=\"lg\"\n\t\t\t\t\t\t\t\tdisabled={buttonDisable}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tReset\n\t\t\t\t\t\t\t</Button>{' '}\n\t\t\t\t\t\t\t{!clearedScreen &&\n\t\t\t\t\t\t\t<p style={{color:'grey'}}><em>Reset for a new visualization.</em></p>}\n\t\t\t\t\t\t</FormGroup>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\n\t\t\t</Form>\n\t\t);\n\t}\n}\n\nexport default Customisation;\n","export const recursiveDivision = (nodes, startX, startY, endX, endY, axis) => {\n\tconst drawnNodes1 = drawDungeon(nodes, endX, endY);\n\tconst drawnNodes2 = divide(nodes, startX + 2, startY + 2, endX - 2, endY - 2, axis);\n\tconst drawnNodes = [ ...drawnNodes1, ...drawnNodes2 ];\n\treturn { newNodes: nodes, drawnNodes };\n};\n\nconst drawDungeon = (nodes, endX, endY) => {\n\tlet drawnNodes = [];\n\tfor (let x = 0; x <= endX; x++) {\n\t\tnodes[x][0].type = 'wall';\n\t\tnodes[x][endY].type = 'wall';\n\t\tdrawnNodes.push(nodes[x][0]);\n\t\tdrawnNodes.push(nodes[x][endY]);\n\t}\n\n\tfor (let y = 0; y <= endY; y++) {\n\t\tnodes[0][y].type = 'wall';\n\t\tnodes[endX][y].type = 'wall';\n\t\tdrawnNodes.push(nodes[0][y]);\n\t\tdrawnNodes.push(nodes[endX][y]);\n\t}\n\n\treturn drawnNodes;\n};\n\nconst divide = (nodes, startX, startY, endX, endY, axis) => {\n\tlet drawnNodes = [];\n\tlet drawnNodes1;\n\tlet drawnNodes2;\n\n\tif (endX < startX || endY < startY) {\n\t\treturn [];\n\t} else if (axis === 'horizontal') {\n\t\tlet alternateX = [];\n\t\t// avoids consecutive walls\n\t\tfor (let x = startX; x <= endX; x += 2) {\n\t\t\talternateX.push(x);\n\t\t}\n\n\t\tlet alternateY = [];\n\t\tfor (let y = startY - 1; y <= endY + 1; y += 2) {\n\t\t\talternateY.push(y);\n\t\t}\n\n\t\tlet wallX = alternateX[Math.floor(Math.random() * alternateX.length)];\n\t\tlet passageY = alternateY[Math.floor(Math.random() * alternateY.length)];\n\n\t\tfor (var y = startY - 1; y <= endY + 1; y++) {\n\t\t\tif (y !== passageY && nodes[wallX][y].type !== 'start' && nodes[wallX][y].type !== 'end') {\n\t\t\t\tnodes[wallX][y].type = 'wall'; // change\n\t\t\t\tdrawnNodes.push(nodes[wallX][y]);\n\t\t\t}\n\t\t}\n\n\t\tif (wallX - startX - 2 > endY - startY) {\n\t\t\tdrawnNodes1 = divide(nodes, startX, startY, wallX - 2, endY, 'horizontal');\n\t\t} else {\n\t\t\tdrawnNodes1 = divide(nodes, startX, startY, wallX - 2, endY, 'vertical');\n\t\t}\n\t\tif (endX - wallX - 2 > endY - startY) {\n\t\t\tdrawnNodes2 = divide(nodes, wallX + 2, startY, endX, endY, 'horizontal');\n\t\t} else {\n\t\t\tdrawnNodes2 = divide(nodes, wallX + 2, startY, endX, endY, 'vertical');\n\t\t}\n\t\treturn [ ...drawnNodes, ...drawnNodes1, ...drawnNodes2 ];\n\t} else {\n\t\tlet alternateX = [];\n\t\tfor (let x = startX - 1; x <= endX + 1; x += 2) {\n\t\t\talternateX.push(x);\n\t\t}\n\n\t\tlet alternateY = [];\n\t\tfor (let y = startY; y <= endY; y += 2) {\n\t\t\talternateY.push(y);\n\t\t}\n\n\t\tlet wallY = alternateY[Math.floor(Math.random() * alternateY.length)];\n\t\tlet passageX = alternateX[Math.floor(Math.random() * alternateX.length)];\n\n\t\tfor (var x = startX - 1; x <= endX + 1; x++) {\n\t\t\tif (x !== passageX && nodes[x][wallY].type !== 'start' && nodes[x][wallY].type !== 'end') {\n\t\t\t\tnodes[x][wallY].type = 'wall';\n\t\t\t\tdrawnNodes.push(nodes[x][wallY]);\n\t\t\t}\n\t\t}\n\n\t\tif (endX - startX > wallY - startY - 2) {\n\t\t\tdrawnNodes1 = divide(nodes, startX, startY, endX, wallY - 2, 'horizontal');\n\t\t} else {\n\t\t\tdrawnNodes1 = divide(nodes, startX, startY, endX, wallY - 2, 'vertical');\n\t\t}\n\t\tif (endX - startX > endY - wallY - 2) {\n\t\t\tdrawnNodes2 = divide(nodes, startX, wallY + 2, endX, endY, 'horizontal');\n\t\t} else {\n\t\t\tdrawnNodes2 = divide(nodes, startX, wallY + 2, endX, endY, 'vertical');\n\t\t}\n\t\treturn [ ...drawnNodes, ...drawnNodes1, ...drawnNodes2 ];\n\t}\n};\n","export const simpleTerrain = (nodes, endX, endY) => {\n\tconst drawnNodes1 = drawDungeon(nodes, endX, endY);\n\tlet drawnNodes2 = [];\n\tnodes.forEach((row) => {\n\t\trow.forEach((node) => {\n\t\t\tif (Math.floor(Math.random() * 100 + 1) < 27 && node.type !== 'start' && node.type !== 'end') {\n\t\t\t\tnode.type = 'wall';\n\t\t\t\tdrawnNodes2.push(node);\n\t\t\t}\n\t\t});\n\t});\n\treturn { nodes, drawnNodes: [ ...drawnNodes1, ...drawnNodes2 ] };\n};\n\nconst drawDungeon = (nodes, endX, endY) => {\n\tlet drawnNodes = [];\n\tfor (let x = 0; x <= endX; x++) {\n\t\tnodes[x][0].type = 'wall';\n\t\tnodes[x][endY].type = 'wall';\n\t\tdrawnNodes.push(nodes[x][0]);\n\t\tdrawnNodes.push(nodes[x][endY]);\n\t}\n\n\tfor (let y = 0; y <= endY; y++) {\n\t\tnodes[0][y].type = 'wall';\n\t\tnodes[endX][y].type = 'wall';\n\t\tdrawnNodes.push(nodes[0][y]);\n\t\tdrawnNodes.push(nodes[endX][y]);\n\t}\n\n\treturn drawnNodes;\n};\n","export const flappyBirdGrid = (nodes, endX, endY) => {\n\tconst drawnNodes1 = drawDungeon(nodes, endX, endY);\n\tlet drawnNodes2 = [];\n\tfor (let i = 2; i < endY; i += 2) {\n\t\tlet hole = 1 + Math.floor(Math.random() * (endX - 1));\n\t\tfor (let j = 0; j < endX; j++) {\n\t\t\tif (j !== hole && nodes[j][i].type !== 'start' && nodes[j][i].type !== 'end') {\n\t\t\t\tnodes[j][i].type = 'wall';\n\t\t\t\tdrawnNodes2.push(nodes[j][i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn { nodes, drawnNodes: [ ...drawnNodes1, ...drawnNodes2 ] };\n};\n\nconst drawDungeon = (nodes, endX, endY) => {\n\tlet drawnNodes = [];\n\tfor (let x = 0; x <= endX; x++) {\n\t\tnodes[x][0].type = 'wall';\n\t\tnodes[x][endY].type = 'wall';\n\t\tdrawnNodes.push(nodes[x][0]);\n\t\tdrawnNodes.push(nodes[x][endY]);\n\t}\n\n\tfor (let y = 0; y <= endY; y++) {\n\t\tnodes[0][y].type = 'wall';\n\t\tnodes[endX][y].type = 'wall';\n\t\tdrawnNodes.push(nodes[0][y]);\n\t\tdrawnNodes.push(nodes[endX][y]);\n\t}\n\n\treturn drawnNodes;\n};\n","import { recursiveDivision } from './recursiveDivision';\nimport { simpleTerrain } from './simpleTerrain';\nimport { flappyBirdGrid } from './flappyBirdGrid';\n\nexport class MazeFacade {\n\tconstructor(nodes, startX, startY, endX, endY, axis) {\n\t\tthis.nodes = nodes;\n\t\tthis.startX = startX;\n\t\tthis.startY = startY;\n\t\tthis.endX = endX;\n\t\tthis.endY = endY;\n\t\tthis.axis = axis;\n\t}\n\n\trecursiveDivision() {\n\t\treturn recursiveDivision(this.nodes, this.startX, this.startY, this.endX, this.endY, this.axis);\n\t}\n\n\tsimpleTerrain() {\n\t\treturn simpleTerrain(this.nodes, this.endX, this.endY);\n\t}\n\n\tflappyBirdGrid() {\n\t\treturn flappyBirdGrid(this.nodes, this.endX, this.endY);\n\t}\n}\n","class Queue {\n\tconstructor() {\n\t\tthis.elements = [];\n\t}\n\n\tenqueue(object) {\n\t\tthis.elements.push(object);\n\t}\n\n\tdequeue() {\n\t\treturn this.elements.shift();\n\t}\n\n\tisEmpty() {\n\t\treturn this.elements.length === 0;\n\t}\n}\n\nexport const breadthFirstSearch = (start, end, nodes) => {\n\tconst nodesCopy = nodes.slice();\n\tconst visitedNodes = solve(start, end, nodes);\n\treturn { visitedNodes: visitedNodes, path: reConstructPath(start, end, nodesCopy) };\n};\n\nconst solve = (start, end, nodes) => {\n\tlet q = new Queue();\n\tq.enqueue(start);\n\n\tlet visitedNodes = [];\n\n\tnodes[start.row][start.column].isVisited = true;\n\tlet node;\n\tlet neighbours;\n\tlet found = false;\n\twhile (!q.isEmpty()) {\n\t\tnode = q.dequeue();\n\t\tneighbours = getNeighbours(node, nodes);\n\n\t\tneighbours.forEach((neighbour) => {\n\t\t\tif (!neighbour.isVisited) {\n\t\t\t\tif (neighbour.row === end.row && neighbour.column === end.column) {\n\t\t\t\t\tneighbour.isVisited = true;\n\t\t\t\t\tneighbour.prev = node;\n\t\t\t\t\tfound = true;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconsole.log('1');\n\t\t\t\tq.enqueue(neighbour);\n\t\t\t\tvisitedNodes.push(neighbour);\n\t\t\t\tneighbour.isVisited = true;\n\t\t\t\tneighbour.prev = node;\n\t\t\t}\n\t\t});\n\t\tif (found) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn visitedNodes;\n};\n\nconst reConstructPath = (start, end, nodes) => {\n\tlet path = [];\n\tfor (let curr = end; curr !== null; curr = curr.prev) {\n\t\tpath.push(curr);\n\t}\n\n\tpath.reverse();\n\n\tif (path[0] === start) {\n\t\tpath.shift();\n\t\tpath.pop();\n\t\treturn path;\n\t}\n\treturn [];\n};\n\nconst getNeighbours = (node, nodes) => {\n\tconst neighbours = [];\n\tconst { row, column } = node;\n\tif (row > 0) neighbours.push(nodes[row - 1][column]);\n\tif (row < nodes.length - 1) neighbours.push(nodes[row + 1][column]);\n\tif (column > 0) neighbours.push(nodes[row][column - 1]);\n\tif (column < nodes[0].length - 1) neighbours.push(nodes[row][column + 1]);\n\treturn neighbours.filter((neighbour) => {\n\t\treturn !neighbour.isVisited && neighbour.type !== 'wall';\n\t});\n};\n","import { breadthFirstSearch } from './breadthFirstSearch';\n\nexport class SearchFacade {\n\tconstructor(start, end, nodes) {\n\t\tthis.start = start;\n\t\tthis.end = end;\n\t\tthis.nodes = nodes;\n\t}\n\n\tbreadthFirstSearch() {\n\t\treturn breadthFirstSearch(this.start, this.end, this.nodes);\n\t}\n}\n","import React, { Component } from 'react';\nimport NavBar from './NavBar/NavBar';\nimport Board from './Board/Board';\nimport Customisation from './Customisation/Customisation';\n\nimport { MazeFacade } from '../maze_algorithms/MazeFacade';\nimport { SearchFacade } from '../path_algorithms/SearchFacade';\n\nimport { Row, Col } from 'react-bootstrap';\n\nconst TOTAL_ROWS = 27;\nconst TOTAL_COLS = 45;\n\nconst START_NODE_ROW = 12;\nconst START_NODE_COL = 8;\nconst END_NODE_ROW = 12;\nconst END_NODE_COL = 35;\n\nexport class Pathfinder extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tnodes: [],\n\t\t\tisMouseDown: false,\n\t\t\tmode: 'draw',\n\t\t\talgorithm: 'bfs',\n\t\t\tmaze: 'recursiveDivision',\n\t\t\tbuttonDisable: false,\n\t\t\tclearedScreen: true\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.reset();\n\t}\n\n\thandleMouseDown(row, column) {\n\t\tconst newNodes = this.state.nodes.slice();\n\t\tif (newNodes[row][column].type === 'regular') {\n\t\t\tnewNodes[row][column].type = 'wall';\n\t\t\tthis.setState({ nodes: newNodes, isMouseDown: true, mode: 'draw' });\n\t\t} else if (newNodes[row][column].type === 'wall') {\n\t\t\tnewNodes[row][column].type = 'regular';\n\t\t\tthis.setState({ nodes: newNodes, isMouseDown: true, mode: 'erase' });\n\t\t}\n\t}\n\n\thandleMouseEnter(row, column) {\n\t\tif (this.state.isMouseDown) {\n\t\t\tconst newNodes = this.state.nodes.slice();\n\t\t\tif (this.state.mode === 'draw' && newNodes[row][column].type === 'regular') {\n\t\t\t\tnewNodes[row][column].type = 'wall';\n\t\t\t} else if (this.state.mode === 'erase' && newNodes[row][column].type === 'wall') {\n\t\t\t\tnewNodes[row][column].type = 'regular';\n\t\t\t}\n\n\t\t\tthis.setState({ nodes: newNodes });\n\t\t} else {\n\t\t\treturn;\n\t\t}\n\t}\n\n\thandleMouseUp() {\n\t\tthis.setState({ isMouseDown: false });\n\t}\n\n\tchangeAlgorithm(newAlg) {\n\t\tthis.setState({ algorithm: newAlg });\n\t}\n\n\tchangeMaze(newMaze) {\n\t\tthis.setState({ maze: newMaze });\n\t}\n\n\t// FIX!!\n\tdrawMaze() {\n\t\t// this.reset();\n\t\tconst nodesCopy = this.state.nodes.slice();\n\t\tconst { maze } = this.state;\n\t\tconst mazeFacade = new MazeFacade(nodesCopy, 0, 0, TOTAL_ROWS - 1, TOTAL_COLS - 1, 'horizontal');\n\t\tif (maze === 'draw') {\n\t\t\treturn;\n\t\t}\n\t\tvar { newNodes, drawnNodes } =\n\t\t\tmaze === 'simpleTerrain'\n\t\t\t\t? mazeFacade.simpleTerrain()\n\t\t\t\t: maze === 'recursiveDivision'\n\t\t\t\t\t? mazeFacade.recursiveDivision()\n\t\t\t\t\t: maze === 'flappyBirdGrid' ? mazeFacade.flappyBirdGrid() : {};\n\t\tlet curr;\n\t\tfor (let i = 0; i < drawnNodes.length; i++) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tcurr = drawnNodes[i];\n\t\t\t\tdocument.getElementById(`node_${curr.row}_${curr.column}`).className = 'walls';\n\t\t\t}, 6 * i);\n\t\t}\n\t\treturn 6 * drawnNodes.length;\n\t}\n\n\tdrawSearchPath() {\n\t\tconst { nodes } = this.state;\n\t\tconst startNode = nodes[START_NODE_ROW][START_NODE_COL];\n\t\tconst endNode = nodes[END_NODE_ROW][END_NODE_COL];\n\t\tconst searchFacade = new SearchFacade(startNode, endNode, nodes);\n\t\tconst { path, visitedNodes } = searchFacade.breadthFirstSearch(startNode, endNode, nodes);\n\n\t\tlet curr;\n\t\tfor (let i = 0; i < visitedNodes.length; i++) {\n\t\t\tsetTimeout(() => {\n\t\t\t\tcurr = visitedNodes[i];\n\t\t\t\tdocument.getElementById(`node_${curr.row}_${curr.column}`).className = 'visited';\n\t\t\t}, 5 * i);\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tfor (let i = 0; i < path.length; i++) {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tcurr = path[i];\n\t\t\t\t\tdocument.getElementById(`node_${curr.row}_${curr.column}`).className = 'shortest-path';\n\t\t\t\t}, 30 * i);\n\t\t\t}\n\t\t}, 5 * visitedNodes.length);\n\t\treturn 5 * visitedNodes.length + 30 * path.length;\n\t}\n\n\treset() {\n\t\tlet initialNodes = createNodes();\n\t\tinitialNodes.forEach((node) => (node.type = 'regular'));\n\t\tdocument.querySelectorAll(\"[id^='node']\").forEach((node) => {\n\t\t\tif (node.className === 'walls' || node.className === 'shortest-path' || node.className === 'visited') {\n\t\t\t\tnode.className = 'regular';\n\t\t\t}\n\t\t});\n\t\tinitialNodes[START_NODE_ROW][START_NODE_COL].type = 'start';\n\t\tinitialNodes[END_NODE_ROW][END_NODE_COL].type = 'end';\n\t\tthis.setState({ nodes: initialNodes, clearedScreen: true });\n\t}\n\n\tvisualize() {\n\t\tif (!this.state.clearedScreen) {\n\t\t\treturn;\n\t\t}\n\t\tthis.setState({ buttonDisable: true, clearedScreen: false });\n\t\t// this.reset();\n\t\tsetTimeout(() => {\n\t\t\tconst waitTime = this.drawMaze();\n\t\t\tsetTimeout(() => {\n\t\t\t\tconst waitTime2 = this.drawSearchPath();\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.setState({ buttonDisable: false });\n\t\t\t\t}, waitTime2 + 200);\n\t\t\t}, waitTime + 500);\n\t\t}, 1100);\n\t}\n\n\trender() {\n\t\tconst { nodes, isMouseDown, buttonDisable, clearedScreen } = this.state;\n\t\treturn (\n\t\t\t<div onMouseUp={() => this.handleMouseUp()}>\n\t\t\t\t<NavBar />\n\t\t\t\t<Row>\n\t\t\t\t\t<Col lg={8}>\n\t\t\t\t\t\t<Board\n\t\t\t\t\t\t\tnodes={nodes}\n\t\t\t\t\t\t\tisMouseDown={isMouseDown}\n\t\t\t\t\t\t\tonMouseDown={(row, column) => this.handleMouseDown(row, column)}\n\t\t\t\t\t\t\tonMouseEnter={(row, column) => this.handleMouseEnter(row, column)}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t\t<Col lg={4}>\n\t\t\t\t\t\t<Customisation\n\t\t\t\t\t\t\tbuttonDisable={buttonDisable}\n\t\t\t\t\t\t\tvisualize={() => this.visualize()}\n\t\t\t\t\t\t\treset={() => this.reset()}\n\t\t\t\t\t\t\tchangeAlgorithm={(newAlg) => this.changeAlgorithm(newAlg)}\n\t\t\t\t\t\t\tchangeMaze={(newMaze) => this.changeMaze(newMaze)}\n\t\t\t\t\t\t\tclearedScreen={clearedScreen}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Col>\n\t\t\t\t</Row>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// Helpers\n\nconst createNodes = () => {\n\tconst nodes = [];\n\tfor (let row = 0; row < TOTAL_ROWS; row++) {\n\t\tconst rowNodes = [];\n\t\tfor (let column = 0; column < TOTAL_COLS; column++) {\n\t\t\trowNodes.push(createNodeObject(row, column));\n\t\t}\n\t\tnodes.push(rowNodes);\n\t}\n\treturn nodes;\n};\n\nconst createNodeObject = (row, column) => {\n\treturn {\n\t\trow,\n\t\tcolumn,\n\t\ttype: 'regular',\n\t\tisVisited: false,\n\t\tprev: null,\n\t\tdist: Infinity\n\t};\n};\n\nexport default Pathfinder;\n","import React, { Component } from 'react';\nimport Pathfinder from './components/Pathfinder';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Pathfinder />\n\t\t\t</div>\n\t\t);\n\t}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}